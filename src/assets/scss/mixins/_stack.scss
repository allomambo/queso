/*======================================
=                Stack                 =
======================================*/

$stack-gap: 30px !default;

/**
 * Align and space elements in a container
 * @param  {string} $orientation     Orientation. Values: 'horizontal' or 'vertical'
 * @param  {string} $alignX          Alignment of each element on X axis. Values: 'left', 'right', 'center' or adaptative according to orientation.
 * @param  {string} $alignY          Alignment of each element on Y axis. Values: 'top', 'bottom', 'center' or adaptative according to orientation.
 * @param  {number} $gap             Width of the gap between elements.
 * @param  {boolean} $wrap           If element can go onto multiple lines. Values: true or false
 * @param  {string} $var-prefix      If needed, change prefix of all var(). Default: 'stack'
 * @return {void}
 */
@mixin stack(
    $orientation: "horizontal",
    $alignX: "center",
    $alignY: "center",
    $gap: $stack-gap,
    $wrap: true,
    $var-prefix: "stack"
) {
    // Validations
    $valid-orientation: horizontal, vertical;
    @if not index($valid-orientation, $orientation) {
        @error "'#{$orientation}' is not a valid orientation. Choose between : #{$valid-orientation}.";
    }

    $valid-align: stretch;
    $valid-justify: space-around, space-between, space-evenly;
    $valid-alignX: left, right, center;
    $valid-alignY: top, bottom, center;
    @if $orientation == "horizontal" {
        $valid-alignX: join($valid-alignX, $valid-justify);
        $valid-alignY: join($valid-alignY, $valid-align);
    } @else if $orientation == "vertical" {
        $valid-alignX: join($valid-alignX, $valid-align);
        $valid-alignY: join($valid-alignY, $valid-justify);
    }
    @debug "X: #{$valid-alignX}";
    @debug "Y: #{$valid-alignY}";

    @if not index($valid-alignX, $alignX) {
        @error "'#{$alignX}' is not a valid X axis alignment. Choose between : #{$valid-alignX}.";
    }

    @if not index($valid-alignY, $alignY) {
        @error "'#{alignY}' is not a valid Y axis alignment. Choose between : #{$valid-alignY}.";
    }

    // Flexbox params depending on chosen orientation and alignments
    $direction: row;
    $align: flex-start;
    $justify: flex-start;

    @if $orientation == "horizontal" {
        $direction: row;

        @if $alignX == "left" {
            $justify: flex-start;
        } @else if $alignX == "right" {
            $justify: flex-end;
        } @else {
            $justify: $alignX;
        }

        @if $alignY == "top" {
            $align: flex-start;
        } @else if $alignY == "bottom" {
            $align: flex-end;
        } @else {
            $align: $alignY;
        }
    } @else if $orientation == "vertical" {
        $direction: column;

        @if $alignX == "left" {
            $align: flex-start;
        } @else if $alignX == "right" {
            $align: flex-end;
        } @else {
            $align: $alignX;
        }

        @if $alignY == "top" {
            $justify: flex-start;
        } @else if $alignY == "bottom" {
            $justify: flex-end;
        } @else {
            $justify: $alignY;
        }
    }

    @if $wrap == true {
        $wrap: wrap;
    } @else {
        $wrap: nowrap;
    }

    // Apply styles
    display: flex;
    align-items: var(--#{$var-prefix}-align, #{$align});
    justify-content: var(--#{$var-prefix}-justify, #{$justify});
    flex-direction: var(--#{$var-prefix}-direction, #{$direction});
    column-gap: var(
        --#{$var-prefix}-col-gap,
        var(--#{$var-prefix}-gap, #{$gap})
    );
    row-gap: var(--#{$var-prefix}-row-gap, var(--#{$var-prefix}-gap, #{$gap}));
    flex-wrap: var(--#{$var-prefix}-wrap, #{$wrap});
}
