/*======================================
=             Containers               =
======================================*/

@use "sass:math";

$containers-screen-size-base: 1440px !default;

$containers: (
    // <name>: <container-width> <gap-width> <fluid>
    default: 1920px 60px,
    fluid: 1920px 60px fluid,
    small: 420px 60px,
    medium: 870px 60px,
    full: none 60px
) !default;

/**
 * Container(s) styles generator
 * @param  {string} $variant     What size variant to generate.
 *                               Use 'all' to generate default base styles and all other keys as modifier classes
 * @return {void}
 */
@mixin container($variant: "default") {
    @if $variant == "all" {
        @each $name, $props in $containers {
            $width: nth($props, 1);
            $gap: nth($props, 2);
            $fluid: index-exists($props, fluid);

            @if $name == "default" {
                @include container-styles($width, $gap, $fluid);
            } @else {
                &.-#{$name} {
                    $container-width: $width;
                    @if $fluid != false {
                        $container-width-fluid: strip-units(
                                math.div($width, $containers-screen-size-base)
                            ) *
                            100vw;
                        $container-width: max(
                            #{$width},
                            #{$container-width-fluid}
                        );
                    }

                    --container-width: #{$container-width};
                    --container-gap: #{$gap};
                }
            }
        }
    } @else {
        @if not map-has-key($containers, $variant) {
            @error "No key found in $containers map for `#{$variant}`. Property omitted.";
        }

        $props: map-get($containers, $variant);
        $width: nth($props, 1);
        $gap: nth($props, 2);
        $fluid: index-exists($props, fluid);

        @include container-styles($width, $gap, $fluid);
    }
}

@mixin container-styles($width, $gap, $fluid: false) {
    $container-width: $width;
    @if $fluid != false {
        $container-width-fluid: strip-units(
                math.div($width, $containers-screen-size-base)
            ) *
            100vw;
        $container-width: max(#{$width}, #{$container-width-fluid});
    }
    --container-width-default: #{$container-width};
    --container-gap-default: #{$gap};
    --container-margin-left-default: auto;
    --container-margin-right-default: auto;

    display: block;
    width: dvar(container-width);
    max-width: calc(100% - (#{dvar(container-gap)} * 2));
    margin-left: dvar(container-margin-left);
    margin-right: dvar(container-margin-right);
}
