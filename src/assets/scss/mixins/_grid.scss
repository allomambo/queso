/*=======================================
=                 Grid                  =
=======================================*/

$grid: (
    // <breakpoint>: <columns> <gap-size>
    xs: 4 20px,
    lg: 8 30px,
    xl: 12 30px
) !default;

$largestGrid: getLargestValue($grid, 1, "complete");
$largestGridColumns: nth($largestGrid, 2);
$largestGridGap: nth($largestGrid, 3);

@mixin make-cssgrid($columns: $largestGridColumns, $bps: $breakpoints) {
    @each $breakpoint in map-keys($bps) {
        $infix: breakpoint-infix($breakpoint, $bps);

        @include min($breakpoint, $bps) {
            @if $columns > 0 {
                @for $i from 1 through $columns {
                    .col-#{$i}#{$infix} {
                        grid-column: auto / span $i;
                    }
                }

                // Start with `1` because `0` is and invalid value.
                // Ends with `$columns - 1` because offsetting by the width of an entire row isn't possible.
                @for $i from 1 through ($columns - 1) {
                    .start-#{$i}#{$infix} {
                        grid-column-start: $i;
                    }
                    .end-#{$i}#{$infix} {
                        grid-column-end: $i * -1;
                    }
                }

                .col-all#{$infix} {
                    grid-column: 1 / -1;
                }

                .col-half#{$infix} {
                    grid-column: auto /
                        span
                        calc(var(--grid-columns, $largestGridColumns) / 2);
                }

                .col-third#{$infix} {
                    grid-column: auto /
                        span
                        calc(var(--grid-columns, $largestGridColumns) / 3);
                }
            }
        }
    }
}

@mixin grid {
    display: grid;
    grid-template-rows: repeat(var(--grid-rows, 1), minmax(0, 1fr));
    grid-template-columns: repeat(
        var(--grid-columns, $largestGridColumns),
        minmax(0, 1fr)
    );
    column-gap: var(--grid-col-gap, var(--grid-gap, $largestGridGap));
    row-gap: var(--grid-row-gap, var(--grid-gap, $largestGridGap));

    @include make-cssgrid();
}
