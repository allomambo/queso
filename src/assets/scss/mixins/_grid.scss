/*=======================================
=                 Grid                  =
=======================================*/

$grid: (
    // <breakpoint>: <columns> <gap-size>
    xs: 4 20px,
    lg: 8 30px,
    xl: 12 30px
) !default;

@mixin make-cssgrid($columns: 12, $var-prefix: "grid", $bps: $breakpoints) {
    @each $breakpoint in map-keys($bps) {
        $infix: breakpoint-infix($breakpoint, $bps);

        @include min($breakpoint, $bps) {
            @if $columns > 0 {
                @for $i from 1 through $columns {
                    .col-#{$i}#{$infix} {
                        --#{$var-prefix}-col-start-default: auto;
                        --#{$var-prefix}-col-end-default: span #{$i};
                    }
                }

                // Start with `1` because `0` is and invalid value.
                // Ends with `$columns - 1` because offsetting by the width of an entire row isn't possible.
                @for $i from 1 through ($columns - 1) {
                    .start-#{$i}#{$infix} {
                        --#{$var-prefix}-col-start-default: #{$i};
                    }
                    .end-#{$i}#{$infix} {
                        --#{$var-prefix}-col-end-default: #{$i * -1};
                    }
                }

                .col-all#{$infix},
                .col-full#{$infix} {
                    --#{$var-prefix}-col-start-default: 1;
                    --#{$var-prefix}-col-end-default: -1;
                }

                .col-half#{$infix} {
                    --#{$var-prefix}-col-start-default: auto;
                    --#{$var-prefix}-col-end-default: span
                        calc(var(--#{$var-prefix}-columns, #{$columns}) / 2);
                }

                .col-third#{$infix} {
                    --#{$var-prefix}-col-start-default: auto;
                    --#{$var-prefix}-col-end-default: span
                        calc(var(--#{$var-prefix}-columns, #{$columns}) / 3);
                }
            }
        }
    }
}

@mixin grid($var-prefix: "grid") {
    $largestGrid: getLargestValue($grid, 1, "complete");
    $largestGridColumns: nth($largestGrid, 2);
    $largestGridGap: nth($largestGrid, 3);

    display: var(--#{$var-prefix}-display, grid);
    grid-template-rows: repeat(var(--#{$var-prefix}-rows, 1), minmax(0, 1fr));
    grid-template-columns: repeat(
        var(--#{$var-prefix}-columns, $largestGridColumns),
        minmax(0, 1fr)
    );
    column-gap: var(
        --#{$var-prefix}-col-gap,
        var(--#{$var-prefix}-gap, $largestGridGap)
    );
    row-gap: var(
        --#{$var-prefix}-row-gap,
        var(--#{$var-prefix}-gap, $largestGridGap)
    );

    > * {
        grid-column-start: dvar(--#{$var-prefix}-col-start, 1);
        grid-column-end: dvar(--#{$var-prefix}-col-end, -1);
    }

    @include make-cssgrid($largestGridColumns, $var-prefix);
}
